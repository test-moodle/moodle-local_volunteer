{"version":3,"file":"volunteer.min.js","sources":["../src/volunteer.js"],"sourcesContent":["// This file is part of the local_volunteer plugin for Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module used to select a volunteer.\n *\n * @module     local_volunteer/volunteer\n * @copyright  2025 Odei Alba <odeialba@odeialba.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Notification from 'core/notification';\nimport Ajax from 'core/ajax';\nimport {getString} from 'core/str';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {add as toastAdd} from 'core/toast';\n\nconst SELECTORS = {\n    FINDVOLUNTEER: \"[data-action='findvolunteer']\"\n};\n\nconst getCheckedUsers = () => {\n    const reportElement = document.querySelector(reportSelectors.regions.report);\n    return reportElement.querySelectorAll('[data-togglegroup=\"report-select-all\"][data-toggle=\"slave\"]:checked');\n};\nconst getSelectAll = () => {\n    const reportElement = document.querySelector(reportSelectors.regions.report);\n    return reportElement.querySelectorAll('[data-togglegroup=\"report-select-all\"]');\n};\n\n/**\n * Find a volunteer.\n * @param {Element} findVolunteerElement\n * @param {Integer} courseid\n */\nconst findVolunteer = async(findVolunteerElement, courseid) => {\n    findVolunteerElement.setAttribute('disabled', true);\n    const checkedUsers = getCheckedUsers();\n\n    var userids = [];\n    checkedUsers.forEach(function(user) {\n        userids.push(user.value);\n    });\n\n    if (!checkedUsers.length) {\n        toastAdd(getString('notenoughusers', 'local_volunteer'), {type: 'danger'});\n        findVolunteerElement.removeAttribute('disabled');\n        return;\n    }\n\n    // Get volunteer.\n    var promises = Ajax.call([\n        {methodname: 'local_volunteer_find_volunteer', args: {courseid: courseid, userids: userids}}\n    ]);\n    promises[0].done(function(result) {\n        if (result.success) {\n            Notification.alert(getString('volunteerfound', 'local_volunteer'), result.volunteerfullname);\n        } else {\n            toastAdd(result.errormessage, {type: 'danger'});\n        }\n    }).then(function() {\n        findVolunteerElement.removeAttribute('disabled');\n        return;\n    }).fail(Notification.exception);\n};\n\n/**\n * Check all users.\n * @param {Integer} userid\n */\nconst checkAllUsersExceptOne = async(userid) => {\n    const selectAll = await getSelectAll();\n    selectAll.forEach(function(checkbox) {\n        checkbox.checked = true;\n    });\n    uncheckUser(userid);\n};\n\n/**\n * Uncheck user.\n * @param {Integer} userid\n */\nconst uncheckUser = async(userid) => {\n    const checkedUsers = await getCheckedUsers();\n    checkedUsers.forEach(function(user) {\n        if (user.value == userid) {\n            user.checked = false;\n        }\n    });\n};\n\n/**\n * Init page\n * @param {Integer} courseid\n * @param {Integer} userid\n */\nexport function init(courseid, userid) {\n    checkAllUsersExceptOne(userid);\n\n    document.addEventListener('click', event => {\n        // Find a volunteer.\n        const findVolunteerElement = event.target.closest(SELECTORS.FINDVOLUNTEER);\n        if (findVolunteerElement) {\n            event.preventDefault();\n            findVolunteer(findVolunteerElement, courseid);\n        }\n    });\n}\n"],"names":["courseid","userid","async","document","querySelector","reportSelectors","regions","report","querySelectorAll","forEach","checkbox","checked","uncheckUser","checkAllUsersExceptOne","addEventListener","event","findVolunteerElement","target","closest","SELECTORS","preventDefault","setAttribute","checkedUsers","getCheckedUsers","userids","user","push","value","length","type","removeAttribute","Ajax","call","methodname","args","done","result","success","alert","volunteerfullname","errormessage","then","fail","Notification","exception","findVolunteer"],"mappings":";;;;;;;oFA4GqBA,SAAUC,QA1BAC,OAAAA,gBA5CLC,SAASC,cAAcC,gBAAgBC,QAAQC,QAChDC,iBAAiB,2CA6C5BC,SAAQ,SAASC,UACvBA,SAASC,SAAU,KAEvBC,YAAYX,SAsBZY,CAAuBZ,QAEvBE,SAASW,iBAAiB,SAASC,cAEzBC,qBAAuBD,MAAME,OAAOC,QAAQC,yBAC9CH,uBACAD,MAAMK,iBApEIlB,OAAMc,qBAAsBhB,YAC9CgB,qBAAqBK,aAAa,YAAY,SACxCC,aAAeC,sBAEjBC,QAAU,MACdF,aAAab,SAAQ,SAASgB,MAC1BD,QAAQE,KAAKD,KAAKE,WAGjBL,aAAaM,6BACL,kBAAU,iBAAkB,mBAAoB,CAACC,KAAM,gBAChEb,qBAAqBc,gBAAgB,YAK1BC,cAAKC,KAAK,CACrB,CAACC,WAAY,iCAAkCC,KAAM,CAAClC,SAAUA,SAAUwB,QAASA,YAE9E,GAAGW,MAAK,SAASC,QAClBA,OAAOC,8BACMC,OAAM,kBAAU,iBAAkB,mBAAoBF,OAAOG,kCAEjEH,OAAOI,aAAc,CAACX,KAAM,cAE1CY,MAAK,WACJzB,qBAAqBc,gBAAgB,eAEtCY,KAAKC,sBAAaC,YAyCbC,CAAc7B,qBAAsBhB,2xBAvF1CmB,wBACa,gCAGbI,gBAAkB,IACEpB,SAASC,cAAcC,gBAAgBC,QAAQC,QAChDC,iBAAiB,uEA2DpCI,YAAcV,MAAAA,gBACWqB,mBACdd,SAAQ,SAASgB,MACtBA,KAAKE,OAAS1B,SACdwB,KAAKd,SAAU"}